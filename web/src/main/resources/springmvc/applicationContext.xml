<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 启用注解 -->
    <!--
    前面的context部分需要namespace的handler进行解析,后面的annotation-config则需要parser进行解析
    这里进行annotation-config的注解定义即告诉spring要注册一个Configuration的processor,并且在PostProcessorRegistrationDelegate.java
    中要进行最优先的执行
    -->
    <context:annotation-config/>
    <!-- 启动组件扫描，排除@Controller组件，该组件由SpringMVC配置文件扫描 -->
    <!--
    这里的scan的注解同上, scan其实就是扫描指定位置把bean的信息加入到BeanDefinitionHolder.java中,为了后面的bean的实例化作准备
    可以设置不扫描的部分,比如带有Controller注解的class
    -->
    <context:component-scan base-package="org.dclar.*service*">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <context:component-scan base-package="org.dclar.h2e*.*"/>

    <context:component-scan base-package="org.dclar.e2h*.*"/>

    <!-- 加载配置属性文件 系统性配置 -->
    <!--
    PropertiesFactoryBean的加载其实是依赖于PropertyPlaceholderConfigurer的提前加载, 由于PropertyPlaceholderConfigurer的 BeanFactoryPostProcessor接口属性
    需要提前加载,而本身又依赖于PropertiesFactoryBean,故PropertiesFactoryBean需要在PropertyPlaceholderConfigurer加载的时候作为reference进行实例化.
    并且在加载完毕后,执行bean的afterPropertiesSet方法而初始化这里定义的所有的properties文件
    -->
    <bean id="configProperties"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:dbconfig.properties</value>
                <!--redis属性文件-->
            </list>
        </property>
    </bean>


    <!--

    这里PropertyPlaceholderConfigurer是实现了接口 BeanFactoryPostProcessor的class
    并且具有最高的PriorityOrdered 执行权限, 所以在 PostProcessorRegistrationDelegate.java中执行的时候会最优先的进行
    postProcessBeanFactory方法的调用,从而进行properties的合并等操作具体参看PropertyPlaceholderConfigurer的继承类
    PropertyResourceConfigurer.java的postProcessBeanFactory的方法

    ps, 在PropertyPlaceholderConfigurer 实例化之前应该先实例化其依赖类PropertiesFactoryBean.java 具体调查
    PostProcessorRegistrationDelegate.java的调用 看是否对其进行了实例化
    -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="properties" ref="configProperties"/>
    </bean>

    <!-- druid数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="filters" value="${filters}"/>
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${maxActive}"/>
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${initialSize}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${maxWait}"/>
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${minIdle}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="${validationQuery}"/>
        <property name="testWhileIdle" value="${testWhileIdle}"/>
        <property name="testOnBorrow" value="${testOnBorrow}"/>
        <property name="testOnReturn" value="${testOnReturn}"/>
        <property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}"/>
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="${removeAbandoned}"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="${logAbandoned}"/>
    </bean>


    <!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
        <!--加载mybatis的全局配置文件-->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
    </bean>


    <!-- mapper扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="org.dclar.mybatis.mapper"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>


</beans>