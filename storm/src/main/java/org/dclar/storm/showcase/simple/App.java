package org.dclar.storm.showcase.simple;

import org.apache.storm.Config;
import org.apache.storm.LocalCluster;
import org.apache.storm.StormSubmitter;
import org.apache.storm.topology.TopologyBuilder;
import org.apache.storm.tuple.Fields;

import java.util.HashMap;
import java.util.Map;


/**
 * 调用FakeCallLogReaderSpout的main方法
 */
public class App {


    public static void main(String[] args) throws Exception {

        //Create Config instance for cluster configuration
        Config config = new Config();

        // 设置zookeeper
//        Map<String, String> map = new HashMap<>();
//        map.put("storm.zookeeper.servers", "centos01");
//
//
        config.setNumWorkers(2);
        config.setDebug(true);

        TopologyBuilder builder = new TopologyBuilder();

        // 设置spout
        builder.setSpout("call-log-reader-spout", new FakeCallLogReaderSpout(), 2).setNumTasks(3);
        // 并发度为1⬆


        // 设置分组策略 决定数据的流向
        /*

        【Shuffle Grouping】
        In shuffle grouping, an equal number of tuples is distributed randomly across all of the workers executing the bolts.
        The following diagram depicts the structure.

        随机分发,保证每个bolt得到相同数量的tuple.


        【Field Grouping】
        The fields with same values in tuples are grouped together and the remaining tuples kept outside.
        Then, the tuples with the same field values are sent forward to the same worker executing the bolts.
        For example, if the stream is grouped by the field “word”, then the tuples with the same string, “Hello” will move to
        the same worker. The following diagram shows how Field Grouping works.


        【Global Grouping】
        All the streams can be grouped and forward to one bolt. This grouping sends tuples generated by all instances of
        the source to a single target instance (specifically, pick the worker with lowest ID).

        【All Grouping】
        All Grouping sends a single copy of each tuple to all instances of the receiving bolt. This kind of grouping is
        used to send signals to bolts. All grouping is useful for join operations.
         */
        // 设置bolt
        builder.setBolt("call-log-creator-bolt", new
                // CallLogCreatorBolt(),3).shuffleGrouping("call-log-reader-spout");
                // CallLogCreatorBolt(),3).fieldsGrouping("call-log-reader-spout", new Fields("from"));
                // CallLogCreatorBolt(), 3).allGrouping("call-log-reader-spout");
                CallLogCreatorBolt(), 4).shuffleGrouping("call-log-reader-spout").setNumTasks(4);
        // 并发度为4 ⬆


        // 设置bolt

        builder.setBolt("call-log-counter-bolt", new
                CallLogCounterBolt(), 4).fieldsGrouping("call-log-creator-bolt", new Fields("call")).setNumTasks(4);
        // 并发度为4 ⬆

/*
        // 本地集群伪分布方式
        LocalCluster cluster = new LocalCluster();
        cluster.submitTopology("LogAnalyserStorm", config, builder.createTopology());
        Thread.sleep(10000);
        //Stop the topology

        cluster.shutdown();
*/

        // 集群的提交方式
        StormSubmitter.submitTopology("StormAPP", config, builder.createTopology());


        Thread.sleep(30000);

    }


}